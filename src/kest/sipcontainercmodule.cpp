/*
 * Module code.
 *
 * Generated by SIP 4.12.4 on Wed Dec 14 00:36:35 2011
 */

#include "sipAPIcontainer.h"


/* Define the strings used by this module. */
const char sipStrings_container[] = {
    'd', 'i', 's', 'p', 'o', 's', 'e', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'F', 'o', 'o', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'm', 'e', 'm', 'b', 'e', 'r', 's', 0,
};


extern "C" {static PyObject *func_containerInfo(PyObject *,PyObject *);}
static PyObject *func_containerInfo(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        FooContainer * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_FooContainer, &a0))
        {
            int sipRes;

            sipRes = containerInfo(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_containerInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *func_updateContainer(PyObject *,PyObject *);}
static PyObject *func_updateContainer(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        FooContainer * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_FooContainer, &a0))
        {
            updateContainer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_updateContainer, NULL);

    return NULL;
}


extern "C" {static PyObject *func_disposeContainer(PyObject *,PyObject *);}
static PyObject *func_disposeContainer(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        FooContainer * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_FooContainer, &a0))
        {
            disposeContainer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_disposeContainer, NULL);

    return NULL;
}


extern "C" {static PyObject *func_createContainer(PyObject *,PyObject *);}
static PyObject *func_createContainer(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            FooContainer *sipRes;

            sipRes = createContainer(a0);

            return sipConvertFromType(sipRes,sipType_FooContainer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_createContainer, NULL);

    return NULL;
}


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_container_FooContainer.ctd_base,
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_container = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_container,
    0,
    0,
    sipStrings_container,
    NULL,
    NULL,
    1,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_container;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_container
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initcontainer
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_containerInfo), func_containerInfo, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_updateContainer), func_updateContainer, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_disposeContainer), func_disposeContainer, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_createContainer), func_createContainer, METH_VARARGS, NULL},
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "container",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_container, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_container), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_container = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_container = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_container == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_container,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_container,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}
